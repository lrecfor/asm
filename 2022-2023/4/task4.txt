Задание.

На языке ассемблера реализовать функции и программы для их проверки. Аргументы для функций брать из командной строки.

1. Замена символов в строке
void Replace (char *str, char c1, char c2);
c1	что заменять
c2	на что заменять
Изменять саму строку str.
1 балл.

2. Замена подстрок.
char * ReplaceStr (const char *text, const char *pattern, const char *rep);
text		где заменять
pattern		что заменять
rep			на что заменять
Возвращать новую строку (нужной длины) с заменёнными вхождениями подстроки pattern.
1 балл.


.686
.model flat, c

.data
format db "%s",13,10,0
format_eax db "%d", 0Dh, 0Ah, 0

.code

printf proto c :dword, :vararg

; int strlen(const char *str)
; находит длинну строки (до завершающего нуля), адрес которой является аргументом
_strlen:
    push ebp
    mov ebp, esp
    sub esp, 8
	
    mov eax, [ebp + 8]
	mov [ebp-4], eax
    mov dword ptr[ebp-8], 0 ; счётчик ax 

strlen_cycle:   
    cmp byte ptr [eax], 0
    je strlen_ret
    add dword ptr[ebp-8], 1
    add dword ptr[ebp-4], 1
	mov eax, [ebp-4]
    jmp strlen_cycle
    
strlen_ret:   
    mov eax, [ebp-8]
    mov esp, ebp
    pop ebp
	retn 4

; void Replace (char *str, char c1, char c2);
; c1	что заменять
; c2	на что заменять
_replace:
	push ebp
    mov ebp, esp
    sub esp, 12
	
    mov edx, [ebp + 8]
	mov [ebp-4], edx
	mov ebx, [ebp + 12]
	mov [ebp-8], ebx
	mov eax, [ebp + 16]
	mov [ebp - 12], eax

replace_start:
	mov dl, byte ptr[ebp-4]
	
	cmp dl, 0
	jz replace_ret
	
	cmp dl, byte ptr[ebx]
	jz replace_found
	
	;add dword ptr [ebp-4], 1
	
replace_found:
	;mov dl, byte ptr [ebp-12]
	;mov byte ptr[ebp-4], dl
	
	;add dword ptr [ebp-4], 1
	jmp replace_start
    
replace_ret:
	;mov eax,    
    mov esp, ebp
    pop ebp
	ret

; char * ReplaceStr (const char *text, const char *pattern, const char *rep);
; text		где заменять
; pattern		что заменять
; rep			на что заменять
replaceStr:
	push ebp
    mov ebp, esp
    sub esp, 12
	
    mov edx, [ebp + 8]
	mov [ebp-4], edx
	mov ebx, [ebp + 12]
	mov [ebp-8], ebx
	mov eax, [ebp + 16]
	mov [ebp - 12], eax

replaceStr_start:
	
	
    
replaceStr_ret:   
    mov esp, ebp
    pop ebp
	ret

main proc
	push ebp
    mov ebp, esp
    sub esp, 10h

	mov eax, [ebp+12]
	mov dword ptr [ebp-4], eax
	add dword ptr[ebp-4], 4
	
	mov eax, [ebp+12]
	mov dword ptr[ebp-8], eax
	add dword ptr[ebp-8], 8
	
	mov eax, [ebp+12]
	mov dword ptr[ebp-12], eax
	add dword ptr[ebp-12], 12
	
	mov eax, dword ptr[ebp-12]
	mov ecx, dword ptr[eax]
	push ecx
	mov eax, dword ptr[ebp-8]
	mov ecx, dword ptr[eax]
	push ecx
	push [ebp-4]
	call _replace
	add sp, 12
	
	push [ebp-4]
	push offset format
	call printf
	add esp,8
	
_ret:
	mov esp, ebp
    pop ebp
	ret

main endp

end
