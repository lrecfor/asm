17.10.2022


Структуры на языке ассемблера

Строковые инструкции
[rep] movs/movsb/movsw/movsd			mov es:[edi], ds:[esi]
[repe/repne] scas/scasb/scasw/scasd		cmp es:[edi], al/ax/eax
[repe/repne] cmps/cmpsb/cmpsw/cmpsd		cmp byte/word/dword ptr ds:[esi], byte/word/dword ptr es:[edi]
[rep] lods/lodsb/lodsw/lodsd			mov al/ax/eax, ds:[esi]
[rep] stos/stosb/stosw/stosd			mov byte/word/dword ptr es:[edi], al/ax/eax



Интерфейс Win32 API

Основным официальным источником информации по технологиям Micrisoft (в том числе WinAPI) является MSDN library, которая поставляется совместно с VisualStudio, может быть установлена отдельно, а также доступна в Интернете (http://msdn.microsoft.com/library).
Все необходимые средства для разработки программ под ОС Windows NT с использованием WinAPI поставляются в Windows SDK, содержащем заголовочный файлы, библиотеки, инструменты разработки, примеры кода. Windows SDK включен в VisualStudio, а также может устанавливаться отдельно.
Основным заголовочным файлом является windows.h. Его включения обычно бывает достаточно для получения доступа к интерфейсу WinAPI. В документации для каждой функции указывается нужный заголовочный и библиотечный файл.

В ОС Windows NT поддержка кодировки UNICODE встроена изначально. Все функции в ядре обрабатывают строки в кодировке UTF-16. Но в прикладных программах может быть удобным использование обычной однобайтовой кодировки ASCII. Поэтому в WinAPI для многих функций предусмотрены две версии, принимающие обычные и юникодные символы.
Например, не существует функции CreateFile, а есть 2 функции:
CreateFileA	принимает ASCII-строки
CreateFileW	принимает UNICODE-строки

В ядре системы все ресурсы, к которым можно получить доступ, представлены объектами ядра (которые на языке Си представляются обычными структурами). Доступ к объектам ядра разделяется на несколько стадий:
1) Открытие объекта с определёнными правами и получение описателя(хендла).
2) Работа с объектом через открытый описатель в соответствии с запрошенными правами.
3) Закрытие объекта. При этом описатель становится недействительным. А объект, если он больше никем не используется, уничтожается.

Описатель представляет собой индекс в таблице описателей процесса. В этой таблице каждому открытому описателю соответствует указатель на открытый/созданный объект и права доступа.


Примеры
1. Чтение и вывод содержимого файла на консоль.
CreateFile
ReadFile
WriteFile
CreateFileMapping
MapViewOfFile


2. Порождения нового процесса
CreateProcess


3. Создание потоков и синхронизация.
CreateThread
WaitForSingleObject
CreateEvent
SetEvent
